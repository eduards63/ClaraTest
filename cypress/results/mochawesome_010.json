{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-26T17:42:26.348Z",
    "end": "2025-05-26T17:42:35.858Z",
    "duration": 9510,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4cd8b28a-0a12-4c28-84e8-225515e97478",
      "title": "",
      "fullFile": "cypress\\e2e\\login\\loginFixture.cy.js",
      "file": "cypress\\e2e\\login\\loginFixture.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a900bbb8-c87c-4f0a-8559-522e168f6f08",
          "title": "Login test with Fixture Data",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Handle multiple login scenarios",
              "fullTitle": "Login test with Fixture Data Handle multiple login scenarios",
              "timedOut": null,
              "duration": 9351,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Initialize LoginPage with English translations\nconst loginPage = new _loginPage.default('en');\n// Load translations and assert page title\nloginPage.loadTranslations().then(() => {\n  loginPage.assertPageTitle();\n});\n// Load test data from fixture file\ncy.fixture('test').then(users => {\n  // Verify the fixture data is an array\n  expect(users).to.be.an('array');\n  // Iterate through each user in the test data\n  users.forEach(user => {\n    // Attempt login with different username types:\n    loginPage.submitLogin(user.username, user.password); // Standard user\n    loginPage.submitLogin(user.problemUsername, user.password); // Problem user\n    loginPage.submitLogin(user.performanceUsername, user.password); // Performance user\n    loginPage.submitLogin(user.errorUsername, user.password); // Error user\n    loginPage.submitLogin(user.visualUsername, user.password); // Visual user\n    // Verify successful login\n    if (user.expected === 'success') {\n      cy.url().should('include', '/inventory.html');\n    }\n    // Note: Error handling would go in the else block\n    else {\n      // TODO: Add error message validation here\n    }\n    // For non-locked users, return to login page for next iteration\n    if (user.username !== 'locked_out_user') {\n      cy.visit('/');\n    }\n  });\n});",
              "err": {},
              "uuid": "dea9a878-ef96-48d7-ae00-76d96c21acc9",
              "parentUUID": "a900bbb8-c87c-4f0a-8559-522e168f6f08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dea9a878-ef96-48d7-ae00-76d96c21acc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9351,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}